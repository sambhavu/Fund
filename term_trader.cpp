#include <cmath>
#include <vector>
#include <iostream>
#include <string>
using namespace std; 

#ifndef Pi 
#define Pi 3.141592653589793238462643 
#endif 

const double EURUSD[679] = {
    
1.116300, 
1.116300, 
1.116440, 
1.116440, 
1.116340, 
1.116110, 
1.116170, 
1.116140, 
1.116170, 
1.116360, 
1.116380, 
1.116380, 
1.116350, 
1.116360, 
1.116220, 
1.116250, 
1.116310, 
1.116370, 
1.116360, 
1.116410, 
1.116390, 
1.116370, 
1.116350, 
1.116410, 
1.116380, 
1.116310, 
1.116180, 
1.116210, 
1.116430, 
1.116550, 
1.116430, 
1.116540, 
1.116570, 
1.116640, 
1.116640, 
1.116730, 
1.116730, 
1.116840, 
1.116820, 
1.116800, 
1.116830, 
1.116900, 
1.116880, 
1.116890, 
1.116890, 
1.116870, 
1.116900, 
1.116900, 
1.116870, 
1.116860, 
1.116860, 
1.116830, 
1.116830, 
1.116830, 
1.116840, 
1.116830, 
1.116770, 
1.116740, 
1.116790, 
1.116910, 
1.117050, 
1.117120, 
1.117160, 
1.117180, 
1.117150, 
1.117150, 
1.117260, 
1.117230, 
1.117210, 
1.117180, 
1.117180, 
1.117150, 
1.117230, 
1.117180, 
1.117190, 
1.117250, 
1.117240, 
1.117230, 
1.117220, 
1.117170, 
1.117170, 
1.117130, 
1.117120, 
1.117010, 
1.117120, 
1.117130, 
1.117130, 
1.117070, 
1.117030, 
1.116970, 
1.116950, 
1.117010, 
1.116960, 
1.117000, 
1.116960, 
1.117060, 
1.117070, 
1.117080, 
1.117070, 
1.117230, 
1.117180, 
1.117240, 
1.117240, 
1.117130, 
1.117070, 
1.117110, 
1.117120, 
1.117230, 
1.117280, 
1.117270, 
1.117320, 
1.117370, 
1.117320, 
1.117330, 
1.117270, 
1.117280, 
1.117210, 
1.117230, 
1.117170, 
1.117240, 
1.117190, 
1.117240, 
1.117180, 
1.117140, 
1.117180, 
1.117180, 
1.117120, 
1.117060, 
1.117200, 
1.117170, 
1.117170, 
1.117230, 
1.117170, 
1.117190, 
1.117190, 
1.117180, 
1.117130, 
1.117170, 
1.117220, 
1.117180, 
1.117270, 
1.117280, 
1.117260, 
1.117280, 
1.117260, 
1.117210, 
1.117170, 
1.117210, 
1.117170, 
1.117160, 
1.117110, 
1.117120, 
1.117110, 
1.117210, 
1.117260, 
1.117260, 
1.117230, 
1.117210, 
1.117160, 
1.117260, 
1.117270, 
1.117260, 
1.117310, 
1.117300, 
1.117360, 
1.117400, 
1.117400, 
1.117310, 
1.117300, 
1.117320, 
1.117300, 
1.117340, 
1.117300, 
1.117350, 
1.117260, 
1.117300, 
1.117300, 
1.117350, 
1.117360, 
1.117300, 
1.117290, 
1.117570, 
1.117440, 
1.117520, 
1.117520, 
1.117630, 
1.117630, 
1.117640, 
1.117710, 
1.117780, 
1.117820, 
1.117850, 
1.117860, 
1.117820, 
1.117750, 
1.117660, 
1.117710, 
1.117760, 
1.117770, 
1.117820, 
1.117820, 
1.117870, 
1.117860, 
1.117900, 
1.117900, 
1.117930, 
1.117920, 
1.117870, 
1.117860, 
1.117850, 
1.117780, 
1.117910, 
1.117900, 
1.117890, 
1.117900, 
1.117950, 
1.117910, 
1.117910, 
1.117900, 
1.117920, 
1.117990, 
1.118050, 
1.118060, 
1.117980, 
1.117950, 
1.117950, 
1.117970, 
1.117950, 
1.118050, 
1.118080, 
1.118100, 
1.118080, 
1.118020, 
1.118010, 
1.117990, 
1.117950, 
1.117840, 
1.117930, 
1.117920, 
1.117800, 
1.117810, 
1.117940, 
1.117910, 
1.117900, 
1.117860, 
1.117860, 
1.117790, 
1.117740, 
1.117710, 
1.117690, 
1.117690, 
1.117650, 
1.117640, 
1.117650, 
1.117660, 
1.117680, 
1.117650, 
1.117630, 
1.117580, 
1.117640, 
1.117640, 
1.117750, 
1.117750, 
1.117880, 
1.117860, 
1.117800, 
1.117860, 
1.117960, 
1.117910, 
1.118040, 
1.117910, 
1.117960, 
1.118170, 
1.118210, 
1.118290, 
1.118470, 
1.118440, 
1.118520, 
1.118520, 
1.118450, 
1.118360, 
1.118430, 
1.118430, 
1.118220, 
1.118420, 
1.118270, 
1.118330, 
1.118330, 
1.118240, 
1.118270, 
1.118440, 
1.118520, 
1.118530, 
1.118510, 
1.118500, 
1.118440, 
1.118480, 
1.118440, 
1.118450, 
1.118420, 
1.118420, 
1.118360, 
1.118350, 
1.118350, 
1.118420, 
1.118450, 
1.118440, 
1.118460, 
1.118380, 
1.118380, 
1.118350, 
1.118310, 
1.118270, 
1.118250, 
1.118320, 
1.118340, 
1.118400, 
1.118400, 
1.118440, 
1.118460, 
1.118530, 
1.118500, 
1.118470, 
1.118500, 
1.118510, 
1.118560, 
1.118520, 
1.118550, 
1.118530, 
1.118570, 
1.118540, 
1.118530, 
1.118540, 
1.118490, 
1.118470, 
1.118480, 
1.118490, 
1.118410, 
1.118450, 
1.118500, 
1.118460, 
1.118450, 
1.118430, 
1.118520, 
1.118580, 
1.118660, 
1.118650, 
1.118660, 
1.118650, 
1.118650, 
1.118660, 
1.118610, 
1.118580, 
1.118610, 
1.118660, 
1.118660, 
1.118700, 
1.118710, 
1.118810, 
1.118820, 
1.118780, 
1.118830, 
1.118850, 
1.118860, 
1.118760, 
1.118780, 
1.118830, 
1.118930, 
1.118910, 
1.118850, 
1.118900, 
1.118880, 
1.118920, 
1.118900, 
1.118920, 
1.118870, 
1.118880, 
1.118900, 
1.118870, 
1.118810, 
1.118810, 
1.118750, 
1.118750, 
1.118650, 
1.118600, 
1.118510, 
1.118530, 
1.118490, 
1.118500, 
1.118480, 
1.118490, 
1.118470, 
1.118430, 
1.118430, 
1.118450, 
1.118460, 
1.118470, 
1.118480, 
1.118470, 
1.118360, 
1.118400, 
1.118450, 
1.118410, 
1.118390, 
1.118450, 
1.118460, 
1.118500, 
1.118520, 
1.118510, 
1.118560, 
1.118600, 
1.118570, 
1.118560, 
1.118560, 
1.118560, 
1.118520, 
1.118500, 
1.118490, 
1.118460, 
1.118450, 
1.118470, 
1.118520, 
1.118530, 
1.118490, 
1.118500, 
1.118470, 
1.118450, 
1.118440, 
1.118410, 
1.118400, 
1.118390, 
1.118390, 
1.118390, 
1.118390, 
1.118380, 
1.118390, 
1.118390, 
1.118390, 
1.118380, 
1.118400, 
1.118360, 
1.118390, 
1.118400, 
1.118400, 
1.118330, 
1.118250, 
1.118250, 
1.118250, 
1.118300, 
1.118260, 
1.118250, 
1.118220, 
1.118190, 
1.118230, 
1.118240, 
1.118250, 
1.118300, 
1.118270, 
1.118260, 
1.118310, 
1.118310, 
1.118310, 
1.118300, 
1.118300, 
1.118200, 
1.118190, 
1.118140, 
1.118140, 
1.118140, 
1.118140, 
1.118120, 
1.118100, 
1.118040, 
1.117980, 
1.117890, 
1.117700, 
1.117700, 
1.117680, 
1.117730, 
1.117710, 
1.117700, 
1.117700, 
1.117650, 
1.117630, 
1.117640, 
1.117660, 
1.117700, 
1.117650, 
1.117690, 
1.117700, 
1.117710, 
1.117710, 
1.117760, 
1.117810, 
1.117790, 
1.117800, 
1.117850, 
1.117840, 
1.117810, 
1.117850, 
1.117850, 
1.117860, 
1.117910, 
1.117870, 
1.117900, 
1.117860, 
1.117870, 
1.117850, 
1.117750, 
1.117760, 
1.117750, 
1.117760, 
1.117810, 
1.117790, 
1.117800, 
1.117800, 
1.117810, 
1.117750, 
1.117810, 
1.117750, 
1.117760, 
1.117660, 
1.117610, 
1.117650, 
1.117600, 
1.117480, 
1.117490, 
1.117450, 
1.117490, 
1.117460, 
1.117500, 
1.117500, 
1.117510, 
1.117510, 
1.117540, 
1.117500, 
1.117520, 
1.117470, 
1.117520, 
1.117610, 
1.117340, 
1.117310, 
1.117300, 
1.117370, 
1.117390, 
1.117500, 
1.117490, 
1.117400, 
1.117450, 
1.117500, 
1.117490, 
1.117420, 
1.117260, 
1.117460, 
1.117160, 
1.117090, 
1.117150, 
1.117190, 
1.117090, 
1.116970, 
1.117000, 
1.117070, 
1.117180, 
1.117210, 
1.117140, 
1.117100, 
1.117100, 
1.116990, 
1.117050, 
1.116870, 
1.116850, 
1.116950, 
1.116910, 
1.116900, 
1.116750, 
1.116750, 
1.116750, 
1.116760, 
1.116860, 
1.116890, 
1.116930, 
1.116950, 
1.116780, 
1.116320, 
1.116280, 
1.116310, 
1.116450, 
1.116480, 
1.116480, 
1.116570, 
1.116560, 
1.116510, 
1.116560, 
1.116450, 
1.116410, 
1.116310, 
1.116210, 
1.116370, 
1.116220, 
1.116220, 
1.116390, 
1.116530, 
1.116550, 
1.116560, 
1.116610, 
1.116570, 
1.116620, 
1.116580, 
1.116660, 
1.116720, 
1.116780, 
1.116820, 
1.116740, 
1.116570, 
1.116750, 
1.116990, 
1.116650, 
1.116860, 
1.117070, 
1.116920, 
1.116930, 
1.117070, 
1.117130, 
1.117120, 
1.117130, 
1.116910, 
1.117010, 
1.116820, 
1.116880, 
1.116970, 
1.117030, 
1.117130, 
1.117000, 
1.116830, 
1.116660, 
1.116530, 
1.116600, 
1.116530, 
1.116550, 
1.116660, 
1.116720, 
1.116490, 
1.116840, 
1.116740, 
1.116830, 
1.116970, 
1.117160, 
1.117070, 
1.117070, 
1.117230, 
1.117270, 
1.117300, 
1.117140, 
1.117100, 
1.117250, 
1.117080, 
1.117180, 
1.117270, 
1.117270, 
1.117230, 
1.117320, 
1.117270, 
1.117090, 
1.116870, 
1.116820, 
1.116820, 
1.116790, 
1.116650, 
1.116720, 
1.116900, 
1.117150, 
1.117200, 
1.117110, 
1.117030, 
1.117270, 
1.117230, 
1.117200, 
1.117040, 
1.117000, 

};

class trade{
	public:
       
        enter_buy(int t, int b);
        double close_buy(int t, int b);
 
        enter_sell(int t, int s);
        double close_sell(int t, int s); 

        double buy(int t);
        double sell(int t); 
        

        vector<vector<double>> buy[][]; 
        vector<vector<double>> sell[][]; 

        double buy_count;
        double sell_count; 

        double profit;
        double total_profit; 


};

enter_buy::trade(int t, int b){ 

double val=EURUSD[t];

buy[b][val];


}

double buy:: trade(int t){ 

for(int i=0; i<=t; i++) { 
//do you want to buy and today
//do you want to close positions today


if(t==1){ 
    buy_count=1; 
    enter_buy(t,buy_count)
    buycount++;
} 


} 


} 


int main(){

    trader fx;
    double p;

      for(int i=1; i<=697; ++i){
           today=i; 
           p+= buy(today);
           p+= sell(today);

       }
	
       return 0;
     


}
